// Copyright 2024-2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Proto definitions for Brush and related messages for use in Ink Strokes API.

syntax = "proto2";

package ink.proto;

import "ink/storage/proto/color.proto";

option java_package = "com.google.ink.proto";
option java_outer_classname = "BrushProto";
option objc_class_prefix = "INKPB";

// Defines a specific instance of a particular `BrushFamily`. In addition to
// the `BrushFamily`, the Brush specifies the `color`, `size`, and `epsilon`
// used to generate and render the `Stroke`.
message Brush {
  // The `color` of the stroke.  This is essentially a parameter to the
  // `BrushPaint`; it can be updated independently of the `BrushFamily`, but
  // its exact meaning (e.g. how it interacts with the texture/shader) will
  // depend on which `BrushPaint` is used.  However, notably, updating this
  // color field *doesn't* require regenerating the stroke mesh (since it only
  // affects rendering, not geometry).
  optional Color color = 1;

  // The `size` of the brush, as measured in stroke-space units.  Brush tip
  // shapes are defined in terms of percentages of this size.  For a simple
  // circular brush tip, this size will be the diameter of the circle, and hence
  // the width of the stroke.  For more complicated brushes (such as
  // non-circular brushes, or brushes with velocity-dependent widths), the exact
  // relationship is at the discretion of the brush designer, and should
  // generally be whatever usually "feels right" when substituting that brush in
  // place of a simple circular brush with the same size field.
  //
  // Updating this size field requires regenerating the stroke mesh (since the
  // mesh geometry will change).
  //
  // Client apps will typically want to provide a "size picker" UI that
  // effectively allows the user to update this field.
  optional float size_stroke_space = 2;

  // The visual fidelity parameter used for the stroke in stroke space.
  // This value represents the smallest distance between two points to still be
  // considered distinct from each other; a lower value will result in a
  // smoother curvature for a zoomed in stroke at the cost of higher memory
  // usage.
  //
  // Updating the epsilon value requires regenerating the stroke mesh (since the
  // mesh geometry will change).
  optional float epsilon_stroke_space = 3;

  // The `BrushFamily` specifies the `BrushTip` and the `BrushPaint` for a given
  // `brush` and can be specified directly or via its `uri`. If only the `uri`
  // is given, the client application is repsonsible for constructing a full
  // `BrushFamily` from the `uri`.
  //
  // Updating the family will result in regenerating the stroke mesh if the
  // `BrushTip` has changed, but not if only the paint has changed.
  //
  // Client apps will typically want to provide a "brush picker" UI that
  // effectively allows the user to update this field.
  oneof family {
    BrushFamily brush_family = 4;
    string brush_family_uri = 5;
  }
}

// Specifies a list of `BrushCoat`s that determine the stroke shape and dynamic
// input response and the shading of the stroke geometry. The `BrushFamily` can
// optionally be identified by setting a non-empty `uri`.
//
// See ../../brush/brush_family.h for details of the URI handling.
message BrushFamily {
  message SpringModelV1 {}
  message SpringModelV2 {}

  message InputModel {
    oneof input_model {
      SpringModelV1 spring_model_v1 = 1;
      SpringModelV2 spring_model_v2 = 2;
    }
  }

  repeated BrushCoat coats = 4;

  // Was `tips` and `paint`, use `coats[0].tips` and `coats[0].paint`
  // instead.
  reserved 1 to 2;

  optional string uri = 3;

  optional InputModel input_model = 5;
}

// Specifies one coat of paint applied by a brush, including the paint itself,
// and the tip(s) used to apply that paint.  For details, see
// ../../brush/brush_coat.h
message BrushCoat {
  repeated BrushTip tips = 1;
  optional BrushPaint paint = 2;
}

// A `BrushTip` consists of parameters that control how stroke inputs are used
// to model the tip shape and color, and create vertices for the stroke mesh.
// For details, see ../../brush/brush_tip.h
message BrushTip {
  optional float scale_x = 1 [default = 1.0];
  optional float scale_y = 2 [default = 1.0];

  optional float corner_rounding = 3 [default = 1.0];
  optional float slant_radians = 4;
  optional float pinch = 5;
  optional float rotation_radians = 6;
  optional float opacity_multiplier = 8 [default = 1.0];
  optional float particle_gap_distance_scale = 9;
  optional float particle_gap_duration_seconds = 10;

  repeated BrushBehavior behaviors = 7;
}

// Stub needs to be fleshed out when we have settled on `BrushPaint`
// specifications.
//
// A `BrushPaint` consists of parameters that describe how a stroke mesh should
// be rendered.
message BrushPaint {
  message TextureKeyframe {
    optional float progress = 1;
    // Size and offset require either both values, x and y, to be set for the
    // attribute or both to be unset.
    optional float size_x = 2;
    optional float size_y = 3;
    optional float offset_x = 4;
    optional float offset_y = 5;
    optional float rotation_in_radians = 6;
    optional float opacity = 7;
  }
  message TextureLayer {
    // LINT.IfChange(texture_wrap)
    enum Wrap {
      WRAP_UNSPECIFIED = 0;
      WRAP_REPEAT = 1;
      WRAP_MIRROR = 2;
      WRAP_CLAMP = 3;
    }
    // LINT.ThenChange(../../brush/brush_paint.h:texture_wrap)
    // LINT.IfChange(texture_size_unit)
    enum SizeUnit {
      SIZE_UNIT_UNSPECIFIED = 0;
      SIZE_UNIT_STROKE_COORDINATES = 1;
      SIZE_UNIT_BRUSH_SIZE = 2;
      SIZE_UNIT_STROKE_SIZE = 3;
    }
    // LINT.ThenChange(../../brush/brush_paint.h:texture_size_unit)
    // LINT.IfChange(texture_origin)
    enum Origin {
      ORIGIN_UNSPECIFIED = 0;
      ORIGIN_STROKE_SPACE_ORIGIN = 1;
      ORIGIN_FIRST_STROKE_INPUT = 2;
      ORIGIN_LAST_STROKE_INPUT = 3;
    }
    // LINT.ThenChange(../../brush/brush_paint.h:texture_origin)
    // LINT.IfChange(texture_mapping)
    enum Mapping {
      MAPPING_UNSPECIFIED = 0;
      MAPPING_TILING = 1;
      MAPPING_WINDING = 2;
    }
    // LINT.ThenChange(../../brush/brush_paint.h:texture_mapping)
    // LINT.IfChange(blend_mode)
    enum BlendMode {
      BLEND_MODE_UNSPECIFIED = 0;
      BLEND_MODE_MODULATE = 1;
      BLEND_MODE_DST_IN = 2;
      BLEND_MODE_DST_OUT = 3;
      BLEND_MODE_SRC_ATOP = 4;
      BLEND_MODE_SRC_IN = 5;
      BLEND_MODE_SRC_OVER = 6;
      BLEND_MODE_DST_OVER = 7;
      BLEND_MODE_SRC = 8;
      BLEND_MODE_DST = 9;
      BLEND_MODE_SRC_OUT = 10;
      BLEND_MODE_DST_ATOP = 11;
      BLEND_MODE_XOR = 12;
    }
    // LINT.ThenChange(../../brush/brush_paint.h:blend_mode)

    optional string color_texture_uri = 1;
    optional float size_x = 2 [default = 1];
    optional float size_y = 3 [default = 1];
    optional SizeUnit size_unit = 4 [default = SIZE_UNIT_STROKE_COORDINATES];
    optional Mapping mapping = 5 [default = MAPPING_TILING];
    optional float offset_x = 6;
    optional float offset_y = 7;
    optional float rotation_in_radians = 8;
    optional float size_jitter_x = 9;
    optional float size_jitter_y = 10;
    optional float offset_jitter_x = 11;
    optional float offset_jitter_y = 12;
    optional float rotation_jitter_in_radians = 13;
    optional float opacity = 14 [default = 1];
    repeated TextureKeyframe keyframes = 15;
    optional BlendMode blend_mode = 16 [default = BLEND_MODE_MODULATE];
    optional Origin origin = 17 [default = ORIGIN_STROKE_SPACE_ORIGIN];
    optional Wrap wrap_x = 18 [default = WRAP_REPEAT];
    optional Wrap wrap_y = 19 [default = WRAP_REPEAT];
    optional int32 animation_frames = 20 [default = 1];
  }

  repeated TextureLayer texture_layers = 1;
}

// A behavior describing how stroke input properties should affect the shape and
// color of the brush tip using a node-graph.
// For details, see ../../brush/brush_behavior.h
message BrushBehavior {
  // LINT.IfChange(source)
  enum Source {
    SOURCE_UNSPECIFIED = 0;
    SOURCE_NORMALIZED_PRESSURE = 1;
    SOURCE_TILT_IN_RADIANS = 2;
    SOURCE_TILT_X_IN_RADIANS = 3;
    SOURCE_TILT_Y_IN_RADIANS = 4;
    SOURCE_ORIENTATION_IN_RADIANS = 5;
    SOURCE_ORIENTATION_ABOUT_ZERO_IN_RADIANS = 6;
    SOURCE_SPEED_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND = 7;
    SOURCE_VELOCITY_X_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND = 8;
    SOURCE_VELOCITY_Y_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND = 9;
    SOURCE_NORMALIZED_DIRECTION_X = 10;
    SOURCE_NORMALIZED_DIRECTION_Y = 11;
    SOURCE_DISTANCE_TRAVELED_IN_MULTIPLES_OF_BRUSH_SIZE = 12;
    SOURCE_TIME_OF_INPUT_IN_SECONDS = 13;
    SOURCE_TIME_OF_INPUT_IN_MILLIS = 14;
    SOURCE_PREDICTED_DISTANCE_TRAVELED_IN_MULTIPLES_OF_BRUSH_SIZE = 15;
    SOURCE_PREDICTED_TIME_ELAPSED_IN_SECONDS = 16;
    SOURCE_PREDICTED_TIME_ELAPSED_IN_MILLIS = 17;
    SOURCE_DISTANCE_REMAINING_IN_MULTIPLES_OF_BRUSH_SIZE = 18;
    SOURCE_TIME_SINCE_INPUT_IN_SECONDS = 19;
    SOURCE_TIME_SINCE_INPUT_IN_MILLIS = 20;
    SOURCE_DIRECTION_IN_RADIANS = 21;
    SOURCE_DIRECTION_ABOUT_ZERO_IN_RADIANS = 22;
    reserved 23;  // SOURCE_CONSTANT_ZERO
    SOURCE_ACCELERATION_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND_SQUARED = 24;
    SOURCE_ACCELERATION_X_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND_SQUARED = 25;
    SOURCE_ACCELERATION_Y_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND_SQUARED = 26;
    SOURCE_ACCELERATION_FORWARD_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND_SQUARED =
        27;
    SOURCE_ACCELERATION_LATERAL_IN_MULTIPLES_OF_BRUSH_SIZE_PER_SECOND_SQUARED =
        28;
    SOURCE_INPUT_SPEED_IN_CENTIMETERS_PER_SECOND = 29;
    SOURCE_INPUT_VELOCITY_X_IN_CENTIMETERS_PER_SECOND = 30;
    SOURCE_INPUT_VELOCITY_Y_IN_CENTIMETERS_PER_SECOND = 31;
    SOURCE_INPUT_DISTANCE_TRAVELED_IN_CENTIMETERS = 32;
    SOURCE_PREDICTED_INPUT_DISTANCE_TRAVELED_IN_CENTIMETERS = 33;
    SOURCE_INPUT_ACCELERATION_IN_CENTIMETERS_PER_SECOND_SQUARED = 34;
    SOURCE_INPUT_ACCELERATION_X_IN_CENTIMETERS_PER_SECOND_SQUARED = 35;
    SOURCE_INPUT_ACCELERATION_Y_IN_CENTIMETERS_PER_SECOND_SQUARED = 36;
    SOURCE_INPUT_ACCELERATION_FORWARD_IN_CENTIMETERS_PER_SECOND_SQUARED = 37;
    SOURCE_INPUT_ACCELERATION_LATERAL_IN_CENTIMETERS_PER_SECOND_SQUARED = 38;
    SOURCE_DISTANCE_REMAINING_AS_FRACTION_OF_STROKE_LENGTH = 39;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:source)

  // LINT.IfChange(target)
  enum Target {
    TARGET_UNSPECIFIED = 0;
    TARGET_WIDTH_MULTIPLIER = 1;
    TARGET_HEIGHT_MULTIPLIER = 2;
    TARGET_SIZE_MULTIPLIER = 3;
    TARGET_SLANT_OFFSET_IN_RADIANS = 4;
    TARGET_PINCH_OFFSET = 5;
    TARGET_ROTATION_OFFSET_IN_RADIANS = 6;
    TARGET_CORNER_ROUNDING_OFFSET = 7;
    TARGET_HUE_OFFSET_IN_RADIANS = 8;
    TARGET_SATURATION_MULTIPLIER = 9;
    TARGET_LUMINOSITY = 10;
    TARGET_OPACITY_MULTIPLIER = 11;
    TARGET_POSITION_OFFSET_X_IN_MULTIPLES_OF_BRUSH_SIZE = 12;
    TARGET_POSITION_OFFSET_Y_IN_MULTIPLES_OF_BRUSH_SIZE = 13;
    TARGET_POSITION_OFFSET_FORWARD_IN_MULTIPLES_OF_BRUSH_SIZE = 14;
    TARGET_POSITION_OFFSET_LATERAL_IN_MULTIPLES_OF_BRUSH_SIZE = 15;
    reserved 16;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:target)

  // LINT.IfChange(out_of_range)
  enum OutOfRange {
    OUT_OF_RANGE_UNSPECIFIED = 0;
    OUT_OF_RANGE_CLAMP = 1;
    OUT_OF_RANGE_REPEAT = 2;
    OUT_OF_RANGE_MIRROR = 3;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:out_of_range)

  // LINT.IfChange(optional_input_property)
  enum OptionalInputProperty {
    OPTIONAL_INPUT_UNSPECIFIED = 0;
    OPTIONAL_INPUT_PRESSURE = 1;
    OPTIONAL_INPUT_TILT = 2;
    OPTIONAL_INPUT_ORIENTATION = 3;
    OPTIONAL_INPUT_TILT_X_AND_Y = 4;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:optional_input_property)

  // LINT.IfChange(binary_op)
  enum BinaryOp {
    BINARY_OP_UNSPECIFIED = 0;
    BINARY_OP_PRODUCT = 1;
    BINARY_OP_SUM = 2;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:binary_op)

  // LINT.IfChange(damping_source)
  enum DampingSource {
    DAMPING_SOURCE_UNSPECIFIED = 0;
    DAMPING_SOURCE_TIME_IN_SECONDS = 1;
    DAMPING_SOURCE_DISTANCE_IN_CENTIMETERS = 2;
    DAMPING_SOURCE_DISTANCE_IN_MULTIPLES_OF_BRUSH_SIZE = 3;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:damping_source)

  // LINT.IfChange(interpolation)
  enum Interpolation {
    INTERPOLATION_UNSPECIFIED = 0;
    INTERPOLATION_LERP = 1;
    INTERPOLATION_INVERSE_LERP = 2;
  }
  // LINT.ThenChange(../../brush/brush_behavior.h:interpolation)

  message Node {
    oneof node {
      SourceNode source_node = 1;
      ConstantNode constant_node = 2;
      FallbackFilterNode fallback_filter_node = 3;
      ToolTypeFilterNode tool_type_filter_node = 4;
      DampingNode damping_node = 5;
      ResponseNode response_node = 6;
      BinaryOpNode binary_op_node = 7;
      TargetNode target_node = 8;
      InterpolationNode interpolation_node = 9;
      NoiseNode noise_node = 10;
    }
  }

  message SourceNode {
    optional Source source = 1;
    optional OutOfRange source_out_of_range_behavior = 2;
    optional float source_value_range_start = 3;
    optional float source_value_range_end = 4;
  }

  message ConstantNode {
    optional float value = 1;
  }

  message NoiseNode {
    optional fixed32 seed = 1;
    optional DampingSource vary_over = 2;
    optional float base_period = 3;
  }

  message FallbackFilterNode {
    optional OptionalInputProperty is_fallback_for = 1;
  }

  message ToolTypeFilterNode {
    // A bitset of tool types, using ink.proto.CodedStrokeInputBatch.ToolType
    // enum values as bit numbers for each tool type.  For example, if only
    // touch and stylus are enabled, then the value of this field should be:
    //   ((1 << ToolType.TOUCH) | (1 << ToolType.STYLUS))
    optional uint32 enabled_tool_types = 1;
  }

  message DampingNode {
    optional DampingSource damping_source = 1;
    optional float damping_gap = 2;
  }

  message ResponseNode {
    oneof response_curve {
      PredefinedEasingFunction predefined_response_curve = 1;
      CubicBezierEasingFunction cubic_bezier_response_curve = 2;
      LinearEasingFunction linear_response_curve = 3;
      StepsEasingFunction steps_response_curve = 4;
    }
  }

  message BinaryOpNode {
    optional BinaryOp operation = 1;
  }

  message InterpolationNode {
    optional Interpolation interpolation = 1;
  }

  message TargetNode {
    optional Target target = 1;
    optional float target_modifier_range_start = 2;
    optional float target_modifier_range_end = 3;
  }

  repeated Node nodes = 15;

  // Were fields controlling brush behavior, use `nodes` instead.
  reserved 1 to 14;
}

// Specifies a predefined easing function. For details, see
// ../../brush/easing_function.h
// LINT.IfChange(predefined)
enum PredefinedEasingFunction {
  PREDEFINED_EASING_UNSPECIFIED = 0;
  PREDEFINED_EASING_LINEAR = 1;
  PREDEFINED_EASING_EASE = 2;
  PREDEFINED_EASING_EASE_IN = 3;
  PREDEFINED_EASING_EASE_OUT = 4;
  PREDEFINED_EASING_EASE_IN_OUT = 5;
  PREDEFINED_EASING_STEP_START = 6;
  PREDEFINED_EASING_STEP_END = 7;
}
// LINT.ThenChange(../../brush/easing_function.h:predefined)

// Specifies a cubic bezier easing function. For details, see
// ../../brush/easing_function.h
message CubicBezierEasingFunction {
  optional float x1 = 1;
  optional float y1 = 2;
  optional float x2 = 3;
  optional float y2 = 4;
}

// Specifies a piecewise-linear easing function. For details, see
// ../../brush/easing_function.h
message LinearEasingFunction {
  // These two lists must have the same length.
  repeated float x = 1 [packed = true];
  repeated float y = 2 [packed = true];
}

// Specifies a step easing function jump behavior. For details, see
// ../../brush/easing_function.h
// LINT.IfChange(step_position)
enum StepPosition {
  STEP_POSITION_UNSPECIFIED = 0;
  STEP_POSITION_JUMP_START = 1;
  STEP_POSITION_JUMP_END = 2;
  STEP_POSITION_JUMP_NONE = 3;
  STEP_POSITION_JUMP_BOTH = 4;
}
// LINT.ThenChange(../../brush/easing_function.h:step_position)

// Specifies a step easing function. For details see
// ../../brush/easing_function.h
message StepsEasingFunction {
  optional int32 step_count = 1;
  optional StepPosition step_position = 2;
}
